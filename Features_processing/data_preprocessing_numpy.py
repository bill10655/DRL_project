# -*- coding: utf-8 -*-
"""data_preprocessing_for_dl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYDE7k6msSNxNkw-cvkGePghaR8PcekX
"""

from google.colab import drive

drive.mount("/content/gdrive")

import os
os.listdir('./gdrive/MyDrive/day_data')
path='./gdrive/MyDrive/day_data'

li=os.listdir('./gdrive/MyDrive/day_data')
li[-1][-3:]
li[0][:1]

li=os.listdir('./gdrive/MyDrive/day_data')
import pandas as pd
import numpy as np
data_dict={}
for data in li:
  if data[-3:]=='csv':
    if data[:1]=='2':
      data_dict[data]=pd.read_csv(path+"//"+data,header=None,encoding= 'unicode_escape')
    else:
      data_dict[data]=pd.read_csv(path+"//"+data,encoding= 'unicode_escape') 
data_dict

data_dict['2017 NAV.csv']
data_dict['201711-12 NAV.csv']
data_dict['2017_NAV_COMBINE.csv']=pd.concat([data_dict['2017 NAV.csv'],data_dict['201711-12 NAV.csv']],axis=0)

data_dict['2017_NAV_COMBINE.csv']

data_dict.keys()

data=pd.DataFrame([],columns=data_dict['2015 NAV.csv'].columns)
data

#concat nav axis=0

for k,v in zip(data_dict.keys(),data_dict.values()):
  if k[:1]=="2":
    if (k!="2017 NAV.csv")&(k!='201711-12 NAV.csv'):
      data=pd.concat([data,v],axis=0)

#data=data[0].sort_values()
data=data.reset_index(drop=True)

data[0][0].replace("ï»¿",'')

def filter_exclude_string(x):
  a=x.replace("ï»¿",'')
  return a
data[0]=data[0].apply(lambda x: filter_exclude_string(x))

data=data.sort_values(by=[0])
data
data=data.reset_index(drop=True)

print(data)

data_dict['Reut_FX.csv']

data_dict['Fund_DS.csv']

data_dict['Fund_DIV.csv']

data[1].value_counts()

data_dict['Fund_DS.csv']['SerFUNDID'].value_counts()

data_dict['Fund_DIV.csv']['FMFUNDCLASSINFOC_ID'].value_counts()

data

data=data.rename(columns={1:'fund_num'})

data['fund_num']=data['fund_num'].astype(int)
data_dict['Fund_DIV.csv']['FMFUNDCLASSINFOC_ID']=data_dict['Fund_DIV.csv']['FMFUNDCLASSINFOC_ID'].astype(int)

d=data_dict['Fund_DIV.csv'].head(10000)
da=data.head(10000)
print(da)
print(d)

import datetime as dt
data[0] = data[0].astype(str).str.split(' ',n=1,expand=True)
data[0]=data[0].apply(lambda x: x.replace("-",'/'))

data=data.rename(columns={0:'date'})
data

print(data['date'].value_counts())
print(data['fund_num'].value_counts())

data['date'].isnull().sum()
data['fund_num']=data['fund_num'].astype(str)
print(data['fund_num'])
print(data['fund_num']+'-'+data['date'])

data2=data_dict['Fund_DIV.csv']
data2['DIVDATE']=data2['DIVDATE'].astype(str)
data['date']=data['date'].astype(str)
data['merge']=data['fund_num']+'-'+data['date']
data2['merge']=data2['FMFUNDCLASSINFOC_ID'].astype(str)+'-'+data2['DIVDATE']

data_dict.keys()

data3=data_dict['Fund_DS.csv']
print(data3)
print(data2)

print(data3['PERFORMANCEID'].value_counts())
d=data2[['PERFORMANCEID','FMFUNDCLASSINFOC_ID']].drop_duplicates(subset=['PERFORMANCEID'])
data4=pd.merge(data3,d,on='PERFORMANCEID')
#print(data4)
print(d.value_counts())

data4.columns

data['fund_num']=data['fund_num'].astype(str)
data4['FMFUNDCLASSINFOC_ID']=data4['FMFUNDCLASSINFOC_ID'].astype(str)

data_divident=pd.merge(data,data4,left_on='fund_num',right_on='FMFUNDCLASSINFOC_ID',how='left')

data_divident



data_divident['PERFORMANCEID'].value_counts()

data=data_divident.dropna(axis=0,subset=['PERFORMANCEID'])

data=data.merge(data2,on='merge',how='left')

data=data.sort_values(by=['date'])

data

#data_final=data
data=data.rename(columns={2:'fund_price',3:'fund_delta',4:'country'})
data_final=data[['date','fund_num','country','RISKLEVEL','fund_price','fund_delta','DIVYIELD','DIVAMT']]

data_final



print(data_final.isnull().sum())
print(len(data))
data_final=data_final.dropna(axis=0,subset=['fund_delta','fund_price'])



print(data_final.isnull().sum())

data_final=data_final.fillna(-1)
p=data_final.pivot_table(values='country', index=data_final['date'], columns='fund_num', aggfunc='first').to_numpy()
q=data_final.pivot_table(values='DIVYIELD', index=data_final['date'], columns='fund_num', aggfunc='first').to_numpy()
#print(np.dstack((p,q)).shape)
print(p.shape)
print(q.shape)
print(q)

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
le.fit(data_final['country'])
data_final['country']=le.transform(data_final['country'])

data_final

p=data_final.pivot_table(values='country', index=data_final['date'], columns='fund_num', aggfunc='first').fillna(-1)
date_index=p.index
date_index
columns=data_final.columns
np_data=p.to_numpy()
def make_piviot_to_numpy(columns,np_data):
  all=np_data
  for name in columns:
    if (name!='country')&(name!='date')&(name!='fund_num'):
      print(name)
      a=data_final.pivot_table(values=name, index=data_final['date'], columns='fund_num', aggfunc='first').fillna(-1)
      a=a.to_numpy()
      all=np.dstack((all,a))
  return all

time_series_data=make_piviot_to_numpy(columns,np_data)
print('shape: ',time_series_data.shape)

time_series_data

a = np.array([[1, 2, 3],[4,5,6]])
b = np.array([[2, 3, 4],[5,6,7]])
c=np.stack((a, b))
day=c[:,0,:]

print(a.shape)
print(day)
print(day[0:2,(0,2)])

np.random.random(3)

time_series_data_reshape = time_series_data.reshape(time_series_data.shape[0], -1)

np.savetxt(path+'\\'+'time_series.txt',time_series_data_reshape,fmt='%s')

"""for dl"""

from gym import Env
from gym.spaces import Dict, Discrete, Box, Tuple

import numpy as np
import random

Box(low=np.array([0,0,0]),high=np.array([1,1,1]))

#write enviroment by yourself
class FundEnv(Env):
  def __init__(self,ratio_before,fund_before,data,index):
    #action :down stay up
    self.ratio_before=ratio_before
    self.fund_before=fund_before
    self.action_space=Box(low=np.array([0,0,0]),high=np.array([2291,2291,2291]))
    self.action_r=Box(low=np.array([0,0,0]),high=np.array([1,1,1]))
    #TEMP ARRAY
    self.observation_space=Box(low=np.array([0,0,0]),high=np.array([1,1,1]))
    #INIT TEMP
    self.state=38+random.randint(-3,3)
    #EPISODE
    self.shower_length=60
  def step(self,action1,action2):
    #上升一度、持平、下降一度
    self.state+=action-1
    self.shower_length-=1
    if self.state>=37 and self.state<=39:
      reward=1
    else:
      reward=-1
    
    if self.shower_length<=0:
      done=True
    else:
      done=False
    #STATE NOISE(THE CHANGE IN ENVIROMENT)
    self.state+=random.randint(-1,1)
    info={}
    return self.state,reward,done,info
    
  def render(self):
    #VISUALIZATION STUFF

    pass
  def reset(self):
    self.state=38+random.randint(-3,3)
    self.shower_length=60

    return self.state
  def make_ratio(self):
    a=np.random.uniform(low=0, high=1, size=(3,))
    out=a/sum(a)
    return out

a=np.random.uniform(low=0, high=1, size=(3,))
out=a/sum(a)
out

env=FundEnv()

env.action_ratio.sample()

episodes = 10
for episode in range(1, episodes+1):
    state = env.reset()
    done = False
    score = 0 
    
    while not done:
        #env.render()
        action = env.action_space.sample()
        n_state, reward, done, info = env.step(action)
        score+=reward
    print('Episode:{} Score:{}'.format(episode, score))
