# -*- coding: utf-8 -*-
"""data_preprocessing_for_dl.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gYDE7k6msSNxNkw-cvkGePghaR8PcekX
"""

#from google.colab import drive

#drive.mount("/content/gdrive")

import os
os.listdir('./day_data')
path='.//day_data'

li=os.listdir(path)
li[-1][-3:]
li[0][:1]

li=os.listdir(path)
import pandas as pd
import numpy as np
data_dict={}
for data in li:
  if data[-3:]=='csv':
    if data[:1]=='2':
      data_dict[data]=pd.read_csv(path+"//"+data,header=None,encoding= 'unicode_escape')
    else:
      data_dict[data]=pd.read_csv(path+"//"+data,encoding= 'unicode_escape') 
data_dict

data_dict['2017 NAV.csv']
data_dict['201711-12 NAV.csv']
data_dict['2017_NAV_COMBINE.csv']=pd.concat([data_dict['2017 NAV.csv'],data_dict['201711-12 NAV.csv']],axis=0)

data_dict['2017_NAV_COMBINE.csv']

data_dict.keys()

data=pd.DataFrame([],columns=data_dict['2015 NAV.csv'].columns)
data

#concat nav axis=0

for k,v in zip(data_dict.keys(),data_dict.values()):
  if k[:1]=="2":
    if (k!="2017 NAV.csv")&(k!='201711-12 NAV.csv'):
      data=pd.concat([data,v],axis=0)

#data=data[0].sort_values()
data=data.reset_index(drop=True)

data[0][0].replace("ï»¿",'')

def filter_exclude_string(x):
  a=x.replace("ï»¿",'')
  return a
data[0]=data[0].apply(lambda x: filter_exclude_string(x))

data=data.sort_values(by=[0])
data
data=data.reset_index(drop=True)

print(data)

data_dict['Reut_FX.csv']

data_dict['Fund_DS.csv']

data_dict['Fund_DIV.csv']

data[1].value_counts()

data_dict['Fund_DS.csv']['SerFUNDID'].value_counts()

data_dict['Fund_DIV.csv']['FMFUNDCLASSINFOC_ID'].value_counts()

data

data=data.rename(columns={1:'fund_num'})

data['fund_num']=data['fund_num'].astype(int)
data_dict['Fund_DIV.csv']['FMFUNDCLASSINFOC_ID']=data_dict['Fund_DIV.csv']['FMFUNDCLASSINFOC_ID'].astype(int)

d=data_dict['Fund_DIV.csv'].head(10000)
da=data.head(10000)
print(da)
print(d)

import datetime as dt
data[0] = data[0].astype(str).str.split(' ',n=1,expand=True)
data[0]=data[0].apply(lambda x: x.replace("-",'/'))

data=data.rename(columns={0:'date'})
data

print(data['date'].value_counts())
print(data['fund_num'].value_counts())

data['date'].isnull().sum()
data['fund_num']=data['fund_num'].astype(str)
print(data['fund_num'])
print(data['fund_num']+'-'+data['date'])

data2=data_dict['Fund_DIV.csv']
data2['DIVDATE']=data2['DIVDATE'].astype(str)
data['date']=data['date'].astype(str)
data['merge']=data['fund_num']+'-'+data['date']
data2['merge']=data2['FMFUNDCLASSINFOC_ID'].astype(str)+'-'+data2['DIVDATE']

data_dict.keys()

data3=data_dict['Fund_DS.csv']
print(data3)
print(data2)

print(data3['PERFORMANCEID'].value_counts())
d=data2[['PERFORMANCEID','FMFUNDCLASSINFOC_ID']].drop_duplicates(subset=['PERFORMANCEID'])
data4=pd.merge(data3,d,on='PERFORMANCEID')
#print(data4)
print(d.value_counts())

data4.columns

data['fund_num']=data['fund_num'].astype(str)
data4['FMFUNDCLASSINFOC_ID']=data4['FMFUNDCLASSINFOC_ID'].astype(str)

data_divident=pd.merge(data,data4,left_on='fund_num',right_on='FMFUNDCLASSINFOC_ID',how='left')

data_divident



data_divident['PERFORMANCEID'].value_counts()

data=data_divident.dropna(axis=0,subset=['PERFORMANCEID'])

data=data.merge(data2,on='merge',how='left')

data=data.sort_values(by=['date'])

data

#data_final=data
data=data.rename(columns={2:'fund_price',3:'fund_delta',4:'country'})
data_final=data[['date','fund_num','country','RISKLEVEL','fund_price','fund_delta','DIVYIELD','DIVAMT']]

data_final



print(data_final.isnull().sum())
print(len(data))
data_final=data_final.dropna(axis=0,subset=['fund_delta','fund_price'])



print(data_final.isnull().sum())

data_final=data_final.fillna(-1)
p=data_final.pivot_table(values='country', index=data_final['date'], columns='fund_num', aggfunc='first').to_numpy()
q=data_final.pivot_table(values='DIVYIELD', index=data_final['date'], columns='fund_num', aggfunc='first').to_numpy()
#print(np.dstack((p,q)).shape)
print(p.shape)
print(q.shape)
print(q)

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
le.fit(data_final['country'])
data_final['country']=le.transform(data_final['country'])

data_final

p=data_final.pivot_table(values='country', index=data_final['date'], columns='fund_num', aggfunc='first').fillna(-1)
date_index=p.index
date_index
columns=data_final.columns
np_data=p.to_numpy()
def make_piviot_to_numpy(columns,np_data):
  all=np_data
  for name in columns:
    if (name!='country')&(name!='date')&(name!='fund_num'):
      print(name)
      a=data_final.pivot_table(values=name, index=data_final['date'], columns='fund_num', aggfunc='first').fillna(-1)
      c=a.columns
      a=a.to_numpy()
      all=np.dstack((all,a))
  return all,c

time_series_data,fund_column=make_piviot_to_numpy(columns,np_data)
print('shape: ',time_series_data.shape)
price_data=time_series_data[:,:,2]
price_data=pd.DataFrame(price_data,columns=fund_column)
'''
a = np.array([[1, 2, 3],[4,5,6]])
b = np.array([[2, 3, 4],[5,6,7]])
c=np.stack((a, b))
day=c[:,0,:]

print(a.shape)
print(day)
print(day[0:2,(0,2)])

np.random.random(3)

time_series_data_reshape = time_series_data.reshape(time_series_data.shape[0], -1)

np.savetxt(path+'\\'+'time_series.txt',time_series_data_reshape,fmt='%s')
'''






#下檔風險 (Downside Deviation)
def DD(df):
    dr=df.pct_change(1)
    r=dr.add(1).cumprod()
    dd=r.div(r.cummax()).sub(1)
    return dd

price_data=price_data.replace(-1,np.nan)
price_data['all_price']=price_data.mean(axis=1)


price_diff=price_data.diff()
#最大回撤 (Maximum Drawdown)
def MD(days):
    data=pd.DataFrame([],columns=price_data.columns)
    for i in range(int(len(price_data)/days)) :
        p=price_data.loc[days*i:days*i+days-1].cummax()-price_data.loc[days*i:days*i+days-1].cummin()
        data=pd.concat([data,p],axis=0)
    p=price_data.loc[days*(i+1):].cummax()-price_data.loc[days*(i+1):].cummin()
    data=pd.concat([data,p],axis=0)
    return data

#最大回撤 (Maximum Drawdown)/price
def MD_div_price(days):
    D=MD(days)
    output=D/price_data
    return output

#貝塔係數 (Beta)
def beta(fund):
    a=price_diff.dropna(subset=[str(fund)],axis=0)[str(fund)]
    adiv=price_data[str(fund)][a.index]
    a=a/adiv
    b=price_diff['all_price'][a.index]
    bdiv=price_data['all_price'][a.index]
    b=b/bdiv
    c=np.cov(a,b)
    covab=c[0][1]
    vara=c[0][0]
    
    return covab/vara

mmmd=MD(100)
max_draw_down=MD_div_price(100)
down_size_divation=DD(price_data)
beta_value=pd.DataFrame([],columns=['beta_value'])

for i in price_data.columns:
    b=beta(i)
    beta_value=beta_value.append({'beta_value':b},ignore_index=True)
index=price_data.columns
beta_value['fund']=index
compare_data=beta_value
compare_data['min_max_draw']=max_draw_down.mean(axis=0,skipna=True).reset_index(drop=True)
compare_data['dd']=down_size_divation.mean(axis=0,skipna=True).reset_index(drop=True)
compare_data['abs_beta']=compare_data['beta_value'].apply(lambda x: abs(x))


def choose_fund(compare_data):
    fund=pd.DataFrame([],columns=['min_max_draw','dd','abs_beta'])
    for i in compare_data.columns:
        if(i!='fund')&(i!='beta_value'):
            c=compare_data.sort_values(by=[i], ascending=True).reset_index(drop=True)
            fund[i]=c.loc[:600,:]['fund']
    return fund
            
fund=choose_fund(compare_data)

i_list=list(set(fund['min_max_draw']).intersection(fund['dd'].to_list()))          
final=list(set(fund['abs_beta']).intersection(i_list))   
first=fund.loc[0,:]
first=first.to_list()
first[0]='2110'
plot_data=price_data[final+first]
from matplotlib.pyplot import figure

fig, axs = plt.subplots(3,figsize=(10,10),dpi=600)

one=axs[0].plot(plot_data[['3138','381','36','2110']])  
two=axs[1].plot(plot_data[['2639','929']]) 
three=axs[2].plot(plot_data['2010'])
axs[0].legend(one,['3138','381','36','2110'],loc = 'upper right')
axs[1].legend(two,['2639','929'])
axs[2].legend(three,'2010')
fig.savefig('fund.png')



profit=[3160,
452,
454,
451,
450,
534,
3802,
2016,
449,
4407,
1931,
2791,
3135,
4405,
455,
2819,
3630]

mmd=compare_data.sort_values(by=['min_max_draw'],ascending=True)['fund'].to_list()
dd=compare_data.sort_values(by=['dd'],ascending=True)['fund'].to_list()
beta=compare_data.sort_values(by=['abs_beta'],ascending=True)['fund'].to_list()


profit=[762,1908,1762,1912,2110,929,4407,4405,3148,4163]


def check(x,profit):    
    li=[]mdd_output=max_draw_down[profit]
    rank=[]
    for i in profit:
        try:
            a=x.index(str(i))
            li.append(i)
            rank.append(a)
        except:
            print('not_in_list')
    return li,rank


r1,rank1=check(mmd, profit)
r2,rank2=check(dd, profit)
r3,rank3=check(beta, profit)

risk_rank=pd.DataFrame([],columns=['fund_num','mmd','dd','beta'])
risk_rank['fund_num']=profit
risk_rank['mmd']=rank1
risk_rank['dd']=rank2
risk_rank['beta']=rank3

profit=[str(i) for i in profit]
mdd_output=max_draw_down[profit]
dd_output=down_size_divation[profit]

mdd_output.to_csv('risk_mdd.csv')
dd_output.to_csv('risk_dd.csv')
risk_rank.to_csv('risk_rank.csv')







        









    
    
    




